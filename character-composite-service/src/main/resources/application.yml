api:
  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL
    contact:
      name: Contact
      url: My
      email: vlada.19982309@gmail.com

character-composite:
  get-character-data:
    description: Returns a detailed info for the specified character
    notes: |
      # Normal response
      If the requested character is found, the method will return information regarding:
      1. Base character information
      2. Stats
      3. Spells
      4. Items
      5. Service Addresses (technical information regarding the addresses of the microservices that created the response)

  create-composite-character:
    description: Creates a composite character
    notes: |
      # Normal response
      The composite character information posted to the API will be split up and stored as separate character-info, spells, stats, and inventory entities.

  delete-composite-character:
    description: Deletes a product character
    notes: |
      # Normal response
      Entities for character stats, spells, items, and inventory related to the specified character will be deleted. The implementation of the delete method is idempotent, meaning that it can be called several times with the same response. This means that a delete request for a non-existing product will return 200 Ok.

server:
  port: 7000

management:
  endpoint:
    health:
      show-details: "ALWAYS"
  endpoints:
    web:
      exposure:
        include: "*"

app:
  character-service:
    host: localhost
    port: 8083
  spells-service:
    host: localhost
    port: 8082
  items-service:
    host: localhost
    port: 8081
  stats-service:
    host: localhost
    port: 8084
  eureka-username: u
  eureka-password: p
  eureka-server: localhost
  auth-server: localhost

eureka:
  client:
    serviceUrl:
      defaultZone: "http://${app.eureka-username}:${app.eureka-password}@${app.eureka-server}:8761/eureka/"
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5


ribbon.ServerListRefreshInterval: 5000

ribbon.NFLoadBalancerPingInterval: 5

spring:
  cloud:
    stream:
      defaultBinder: rabbit
      default.contentType: application/json
      bindings:
        output-character:
          destination: character
          producer:
            required-groups: auditGroup
        output-spells:
          destination: spells
          producer:
            required-groups: auditGroup
        output-stats:
          destination: stats
          producer:
            required-groups: auditGroup
        output-inventory:
          destination: inventory
          producer:
            required-groups: auditGroup
      kafka:
        binder:
          brokers: 127.0.0.1
          defaultBrokerPort: 9092
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://${app.auth-server}:9999/.well-known/jwks.json

  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest


  profiles:
    active: default

---
spring:
  profiles: docker

  rabbitmq:
    host: rabbitmq

  cloud:
    stream:
      kafka:
        binder:
          brokers: kafka
  application:
    name: character-composite


app:
    character-service:
        host: character
        port: 8080
    spells-service:
        host: spells
        port: 8080
    items-service:
      host: items
      port: 8080
    stats-service:
      host: stats
      port: 8080
    eureka-server: eureka
    auth-server: auth-server  
 
server:
    port: 8080

app.eureka-server: eureka